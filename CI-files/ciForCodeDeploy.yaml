name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: run pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro

      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python3 scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python3 -m unittest tests/fast-api-test.py

      - name: Log in to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 823558662715.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker Image
        if: success()
        run: |
          docker build -t virtualvishal .

      - name: Tag Docker Image
        if: success()
        run: |
          docker tag virtualvishal:latest 823558662715.dkr.ecr.ap-south-1.amazonaws.com/virtualvishal:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push 823558662715.dkr.ecr.ap-south-1.amazonaws.com/virtualvishal:latest

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://stscorecodedeploybucket/deployment.zip

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name MyDockerApp2 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name MyDockerAppASGDeploymentGroup \
            --s3-location bucket=stscorecodedeploybucket,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1
